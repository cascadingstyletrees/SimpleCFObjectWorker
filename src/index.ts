export default {
  async fetch(req) {
    // Get the path from the request URL
    const url = new URL(req.url)
    const path = url.pathname

    // Check the path and create JSON or HTML response
    if (path === '/json') {
      // If the path is "/json", generate a JSON response
      
      // Check if the request contains a Cloudflare Object, and set it to `data`
      const data =
        req.cf !== undefined
          ? req.cf
          : { error: "The `cf` object is not available inside the preview." };

      // Convert the request headers into an object and format them nicely as a JSON string
      const headersObject = Object.fromEntries(req.headers)
      const requestHeaders = JSON.stringify(headersObject, null, 2)

      // Create the JSON response, combining the Cloudflare Object and the request headers
      const jsonResponse = {
        ...data,
        requestHeaders: JSON.parse(requestHeaders),
      }

      // Convert the JSON response into a formatted string
      const unescapedJsonResponse = JSON.stringify(jsonResponse, null, 2)

      // Return a new Response object containing the JSON response
      return new Response(unescapedJsonResponse, {
        headers: {
          "content-type": "application/json",
        },
      });
    } else {
      // If the path is not "/json", generate an HTML response
      
      // Convert the request headers into an object and format them nicely as a JSON string
      const headersObject = Object.fromEntries(req.headers)
      const requestHeaders = JSON.stringify(headersObject, null, 2)

      // Create the HTML markup to be returned by the response
      const html = `<!DOCTYPE html >
      <head><title>simple worker</title></head>
      <body>
        <h1>Hello World</h1>
        <p>This markup was generated by a Cloudflare Worker.</p>
        <pre>Cloudflare Object: ${JSON.stringify(req.cf, null, 2)}</pre>
        <pre>Request headers: ${requestHeaders}</pre>
      </body>
      </html>`;

      // Return a new Response object containing the HTML markup
      return new Response(html, {
        headers: {
          "content-type": "text/html",
        },
      });
    }
  }
}
